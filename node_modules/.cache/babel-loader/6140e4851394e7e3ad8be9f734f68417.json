{"ast":null,"code":"var _jsxFileName = \"/Users/nana/Desktop/polex/src/blocks/FillBlanks.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport BlankInput from \"./BlankInput\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function FillBlanks(_ref) {\n  _s();\n\n  let {\n    words\n  } = _ref;\n  let blanksCount = 0;\n  const [filledBlanksCount, setFilledBlanksCount] = useState(0);\n\n  function increaseFilledBlanksCount() {\n    setFilledBlanksCount(filledBlanksCount + 1);\n  }\n\n  function decreaseFilledBlanksCount() {\n    setFilledBlanksCount(filledBlanksCount - 1);\n  }\n\n  const createTrainingWord = (trainWord, rightWord) => trainWord.split('').map((v, i) => {\n    if (v === '_') {\n      blanksCount += 1;\n      const valueFromWord = rightWord[i];\n      return /*#__PURE__*/_jsxDEV(BlankInput, {\n        correctValue: valueFromWord,\n        decreaseFilledBlanksCount: decreaseFilledBlanksCount,\n        increaseFilledBlanksCount: increaseFilledBlanksCount\n      }, `${i}input`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 21\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"span\", {\n      children: v\n    }, `${i}rightWord`, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 20\n    }, this);\n  });\n\n  const renderWords = () => data.map(el => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"FilledBlanks__trainingWord\",\n    children: createTrainingWord(el.trainWord, el.rightWord)\n  }, el.id, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 13\n  }, this));\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"FilledBlanks\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"tip\",\n      children: \"\\u0417\\u0430\\u043F\\u043E\\u043B\\u043D\\u0438\\u0442\\u0435 \\u043F\\u0440\\u043E\\u043F\\u0443\\u0449\\u0435\\u043D\\u043D\\u044B\\u0435 \\u0431\\u0443\\u043A\\u0432\\u044B\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      children: renderWords()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"FilledBlanks__showingFinish\",\n      children: [\"\\u0432\\u0441\\u0435\\u0433\\u043E \", blanksCount, \"\\u0437\\u0430\\u043F\\u043E\\u043B\\u043D\\u0435\\u043D\\u043E \", filledBlanksCount]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 9\n  }, this);\n}\n\n_s(FillBlanks, \"nG1/qmkmQe3gV0yP5wqzp0yDXfw=\");\n\n_c = FillBlanks;\n\nvar _c;\n\n$RefreshReg$(_c, \"FillBlanks\");","map":{"version":3,"sources":["/Users/nana/Desktop/polex/src/blocks/FillBlanks.jsx"],"names":["React","useState","BlankInput","FillBlanks","words","blanksCount","filledBlanksCount","setFilledBlanksCount","increaseFilledBlanksCount","decreaseFilledBlanksCount","createTrainingWord","trainWord","rightWord","split","map","v","i","valueFromWord","renderWords","data","el","id"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,UAAP,MAAuB,cAAvB;;AAEA,eAAe,SAASC,UAAT,OAA6B;AAAA;;AAAA,MAAT;AAACC,IAAAA;AAAD,GAAS;AAExC,MAAIC,WAAW,GAAG,CAAlB;AAEA,QAAM,CAACC,iBAAD,EAAoBC,oBAApB,IAA4CN,QAAQ,CAAC,CAAD,CAA1D;;AAEA,WAASO,yBAAT,GAAqC;AACjCD,IAAAA,oBAAoB,CAACD,iBAAiB,GAAG,CAArB,CAApB;AACH;;AAED,WAASG,yBAAT,GAAqC;AACjCF,IAAAA,oBAAoB,CAACD,iBAAiB,GAAG,CAArB,CAApB;AACH;;AAED,QAAMI,kBAAkB,GAAG,CAACC,SAAD,EAAYC,SAAZ,KACvBD,SAAS,CAACE,KAAV,CAAgB,EAAhB,EAAoBC,GAApB,CAAwB,CAACC,CAAD,EAAIC,CAAJ,KAAU;AAC9B,QAAID,CAAC,KAAK,GAAV,EAAe;AACXV,MAAAA,WAAW,IAAI,CAAf;AACA,YAAMY,aAAa,GAAGL,SAAS,CAACI,CAAD,CAA/B;AACA,0BACI,QAAC,UAAD;AAEI,QAAA,YAAY,EAAEC,aAFlB;AAGI,QAAA,yBAAyB,EAAER,yBAH/B;AAII,QAAA,yBAAyB,EAAED;AAJ/B,SACU,GAAEQ,CAAE,OADd;AAAA;AAAA;AAAA;AAAA,cADJ;AAQH;;AACD,wBAAO;AAAA,gBAA6BD;AAA7B,OAAY,GAAEC,CAAE,WAAhB;AAAA;AAAA;AAAA;AAAA,YAAP;AACH,GAdD,CADJ;;AAiBA,QAAME,WAAW,GAAG,MAChBC,IAAI,CAACL,GAAL,CAASM,EAAE,iBACP;AAAK,IAAA,SAAS,EAAC,4BAAf;AAAA,cACKV,kBAAkB,CAACU,EAAE,CAACT,SAAJ,EAAeS,EAAE,CAACR,SAAlB;AADvB,KAAiDQ,EAAE,CAACC,EAApD;AAAA;AAAA;AAAA;AAAA,UADJ,CADJ;;AAOA,sBACI;AAAK,IAAA,SAAS,EAAC,cAAf;AAAA,4BACI;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAGI;AAAA,gBACKH,WAAW;AADhB;AAAA;AAAA;AAAA;AAAA,YAHJ,eAOI;AAAK,MAAA,SAAS,EAAC,6BAAf;AAAA,oDACWb,WADX,6DAEeC,iBAFf;AAAA;AAAA;AAAA;AAAA;AAAA,YAPJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAcH;;GApDuBH,U;;KAAAA,U","sourcesContent":["import React, { useState } from \"react\";\nimport BlankInput from \"./BlankInput\";\n\nexport default function FillBlanks({words}) {\n\n    let blanksCount = 0\n\n    const [filledBlanksCount, setFilledBlanksCount] = useState(0);\n\n    function increaseFilledBlanksCount() {\n        setFilledBlanksCount(filledBlanksCount + 1);\n    }\n\n    function decreaseFilledBlanksCount() {\n        setFilledBlanksCount(filledBlanksCount - 1);\n    }\n\n    const createTrainingWord = (trainWord, rightWord) =>\n        trainWord.split('').map((v, i) => {\n            if (v === '_') {\n                blanksCount += 1;\n                const valueFromWord = rightWord[i];\n                return (\n                    <BlankInput\n                        key={`${i}input`}\n                        correctValue={valueFromWord}\n                        decreaseFilledBlanksCount={decreaseFilledBlanksCount}\n                        increaseFilledBlanksCount={increaseFilledBlanksCount}\n                    />\n                );\n            }\n            return <span key={`${i}rightWord`}>{v}</span>;\n        });\n\n    const renderWords = () =>\n        data.map(el => (\n            <div className=\"FilledBlanks__trainingWord\" key={el.id}>\n                {createTrainingWord(el.trainWord, el.rightWord)}\n            </div>\n        ));\n\n    return (\n        <div className=\"FilledBlanks\">\n            <div className=\"tip\">Заполните пропущенные буквы</div>\n\n            <section>\n                {renderWords()}\n            </section>\n\n            <div className=\"FilledBlanks__showingFinish\">\n                всего {blanksCount}\n                заполнено {filledBlanksCount}\n            </div>\n        </div>\n    )\n}"]},"metadata":{},"sourceType":"module"}