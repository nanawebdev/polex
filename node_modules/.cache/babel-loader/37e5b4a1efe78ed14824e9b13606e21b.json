{"ast":null,"code":"var _jsxFileName = \"/Users/nana/Desktop/polex/src/blocks/BlankInput.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst BlankInput = _ref => {\n  _s();\n\n  let {\n    correctValue,\n    increaseFilledBlanksCount,\n    decreaseFilledBlanksCount\n  } = _ref;\n  const [value, setValue] = useState('');\n  const isValid = value.toLowerCase() === correctValue.toLowerCase();\n  const isInputEmpty = value === '';\n\n  function getBorderColor() {\n    const mistake = {\n      borderColor: 'red',\n      animationName: 'showmistake',\n      animationIterationCount: 'infinite',\n      animationDuration: '1s'\n    };\n    const empty = {\n      borderColor: 'rgb(133,80,255)'\n    };\n    const correct = {\n      borderColor: 'green',\n      animationName: 'showcorrect',\n      animationIterationCount: 'linear',\n      animationDuration: '2s'\n    };\n\n    if (isInputEmpty) {\n      return empty;\n    }\n\n    if (isValid) {\n      return correct;\n    }\n\n    return mistake;\n  }\n\n  function onChange(e) {\n    setValue(e.target.value);\n\n    if (value !== '' && e.target.value !== '') {\n      return;\n    }\n\n    if (e.target.value !== '') {\n      increaseFilledBlanksCount();\n    } else {\n      decreaseFilledBlanksCount();\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"BlankInput\",\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      value: value,\n      maxLength: \"1\",\n      onChange: onChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"BlankInput__result\",\n      style: getBorderColor()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 7\n  }, this);\n};\n\n_s(BlankInput, \"A2PXPeq8TepW328gUMM4+o8Xryo=\");\n\n_c = BlankInput;\nexport default BlankInput;\n\nvar _c;\n\n$RefreshReg$(_c, \"BlankInput\");","map":{"version":3,"sources":["/Users/nana/Desktop/polex/src/blocks/BlankInput.jsx"],"names":["React","useState","BlankInput","correctValue","increaseFilledBlanksCount","decreaseFilledBlanksCount","value","setValue","isValid","toLowerCase","isInputEmpty","getBorderColor","mistake","borderColor","animationName","animationIterationCount","animationDuration","empty","correct","onChange","e","target"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;;;AAEA,MAAMC,UAAU,GAAG,QAIX;AAAA;;AAAA,MAJY;AAChBC,IAAAA,YADgB;AAEhBC,IAAAA,yBAFgB;AAGhBC,IAAAA;AAHgB,GAIZ;AACJ,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBN,QAAQ,CAAC,EAAD,CAAlC;AAEA,QAAMO,OAAO,GAAGF,KAAK,CAACG,WAAN,OAAwBN,YAAY,CAACM,WAAb,EAAxC;AAEA,QAAMC,YAAY,GAAGJ,KAAK,KAAK,EAA/B;;AAEA,WAASK,cAAT,GAA0B;AACxB,UAAMC,OAAO,GAAG;AACdC,MAAAA,WAAW,EAAE,KADC;AAEdC,MAAAA,aAAa,EAAE,aAFD;AAGdC,MAAAA,uBAAuB,EAAE,UAHX;AAIdC,MAAAA,iBAAiB,EAAE;AAJL,KAAhB;AAOA,UAAMC,KAAK,GAAG;AACZJ,MAAAA,WAAW,EAAE;AADD,KAAd;AAIA,UAAMK,OAAO,GAAG;AACdL,MAAAA,WAAW,EAAE,OADC;AAEdC,MAAAA,aAAa,EAAE,aAFD;AAGdC,MAAAA,uBAAuB,EAAE,QAHX;AAIdC,MAAAA,iBAAiB,EAAE;AAJL,KAAhB;;AAOA,QAAIN,YAAJ,EAAkB;AAChB,aAAOO,KAAP;AACD;;AAED,QAAIT,OAAJ,EAAa;AACX,aAAOU,OAAP;AACD;;AAED,WAAON,OAAP;AACD;;AAED,WAASO,QAAT,CAAkBC,CAAlB,EAAqB;AACnBb,IAAAA,QAAQ,CAACa,CAAC,CAACC,MAAF,CAASf,KAAV,CAAR;;AACA,QAAIA,KAAK,KAAK,EAAV,IAAgBc,CAAC,CAACC,MAAF,CAASf,KAAT,KAAmB,EAAvC,EAA2C;AACzC;AACD;;AAED,QAAIc,CAAC,CAACC,MAAF,CAASf,KAAT,KAAmB,EAAvB,EAA2B;AACzBF,MAAAA,yBAAyB;AAC1B,KAFD,MAEO;AACLC,MAAAA,yBAAyB;AAC1B;AACF;;AAED,sBACE;AAAK,IAAA,SAAS,EAAC,YAAf;AAAA,4BACE;AAAO,MAAA,KAAK,EAAEC,KAAd;AAAqB,MAAA,SAAS,EAAC,GAA/B;AAAmC,MAAA,QAAQ,EAAEa;AAA7C;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAK,MAAA,SAAS,EAAC,oBAAf;AAAoC,MAAA,KAAK,EAAER,cAAc;AAAzD;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAMD,CA5DH;;GAAMT,U;;KAAAA,U;AA+DJ,eAAeA,UAAf","sourcesContent":["import React, { useState } from \"react\";\n\nconst BlankInput = ({\n    correctValue,\n    increaseFilledBlanksCount,\n    decreaseFilledBlanksCount,\n  }) => {\n    const [value, setValue] = useState('');\n  \n    const isValid = value.toLowerCase() === correctValue.toLowerCase();\n  \n    const isInputEmpty = value === '';\n  \n    function getBorderColor() {\n      const mistake = {\n        borderColor: 'red',\n        animationName: 'showmistake',\n        animationIterationCount: 'infinite',\n        animationDuration: '1s',\n      };\n  \n      const empty = {\n        borderColor: 'rgb(133,80,255)',\n      };\n  \n      const correct = {\n        borderColor: 'green',\n        animationName: 'showcorrect',\n        animationIterationCount: 'linear',\n        animationDuration: '2s',\n      };\n  \n      if (isInputEmpty) {\n        return empty;\n      }\n  \n      if (isValid) {\n        return correct;\n      }\n  \n      return mistake;\n    }\n  \n    function onChange(e) {\n      setValue(e.target.value);\n      if (value !== '' && e.target.value !== '') {\n        return;\n      }\n  \n      if (e.target.value !== '') {\n        increaseFilledBlanksCount();\n      } else {\n        decreaseFilledBlanksCount();\n      }\n    }\n  \n    return (\n      <div className=\"BlankInput\">\n        <input value={value} maxLength=\"1\" onChange={onChange} />\n        <div className=\"BlankInput__result\" style={getBorderColor()} />\n      </div>\n    );\n  };\n  \n  \n  export default BlankInput;"]},"metadata":{},"sourceType":"module"}